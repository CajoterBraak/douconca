% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.dcca.R
\name{predict.dcca}
\alias{predict.dcca}
\title{Prediction for double-constrained correspondence analysis (dc-CA)}
\usage{
\method{predict}{dcca}(
  object,
  ...,
  type = c("env", "traits", "response", "reg_env", "reg_traits"),
  rank = "full",
  newdata = NULL
)
}
\arguments{
\item{object}{return value of \code{\link{dc_CA}}.}

\item{...}{Other arguments passed to the function (currently ignored).}

\item{type}{type of prediction, \code{c("env", "traits", "response", 
"reg_env", "reg_trait")} for environmental values, values of traits, 
response (expected abundance), regression coefficients for environmental 
and trait predictors.}

\item{rank}{rank or number of axes to use. Default "full" for all axes 
(no rank-reduction).}

\item{newdata}{Data in which to look for variable with which to predict.
For \code{type = "reg_env" or "reg_trait"} newdata is ignored.
For \code{type = "env" or "trait"}, newdata is data frame of trait and 
environmental values, respectively, which are used for the prediction. If 
omitted, fitted values are generated.
For \code{type = "response"}, newdata is a list of two data frames with 
trait and environmental values in this order, \emph{e.g.} 
\code{list(traits = dataTraits, env = dataEnv)}.}
}
\description{
Prediction of traits from environment, environment from traits and response 
from trait and environment data.

With \code{type = "traits"} and \code{newdata = NULL}, predict gives the 
fitted mean traits, \emph{i.e.} the fitted community weighted means.
With \code{type = "env"} and \code{newdata = NULL}, predict gives the 
fitted mean environment, \emph{i.e.} the fitted species niche centroids.
}
\details{
Variables that are in the model but not in \code{newdata} are set to their 
weighted means in the training data. Predictions are thus at the (weighted)
mean of the quantitative variables not included. Predictions with 
not-included factors are at the weighted mean (none of the factor effects 
are included).

For \code{type = "response"} and non-null newdata, the species weights of 
the training are used; the site weights are taken equal. Many of the 
predicted values may be negative, indicating expected absences (0) or small
expected response values.

Regression coefficients obtained with \code{type="reg_env"} or  
\code{type="reg_traits"} are 
for standardized traits and environmental variables.
}
\examples{
data("dune_trait_env")

# rownames are carried forward in results
rownames(dune_trait_env$comm) <- dune_trait_env$comm$Sites

divide <- TRUE # divide by site.totals if TRUE

cat("\n\n\n******* divide.by.site.totals ==", divide, "*******\n\n\n")
mod <- dc_CA(formulaEnv = ~A1 + Moist + Mag + Use + Condition(Manure),
             formulaTraits = ~ SLA + Height + LDMC + Condition(Seedmass) + Lifespan,
             response = dune_trait_env$comm[, -1],  # must delete "Sites"
             dataEnv = dune_trait_env$envir,
             dataTraits = dune_trait_env$traits,
             divide.by.site.totals = divide,
             verbose = TRUE)

# regression coefficients
predict(mod, type = "reg_env")
predict(mod, type = "reg_traits")

# fit the mean traits at each site (20x6),
# that is CWM at each site, so analyse with CWMSNC version
pred.traits <- predict(mod, type = "traits")
head(pred.traits)

# fit the mean environment for each species (28x8)
# that is SNC of each species
pred.env <- predict(mod, type = "env")
head(pred.env)

CWMSNC <- list(CWM = pred.traits, SNC = pred.env, weights = mod$weights, 
               data = mod$data, formulaEnv = mod$formulaEnv, 
               formulaTraits = mod$formulaTraits)
CWMSNC$data$Y <- NULL

mod2 <- dc_CA(response = CWMSNC,
              divide.by.site.totals = divide,
              verbose = TRUE)

mod$eigenvalues / mod2$eigenvalues
mod2$site_axes$R2_env # perfect fit
mod2$species_axes$R2_traits # perfect fit

pred <- predict(mod, type = "response")
# pred has negative values and dc_CA cannot have negatives in the response
pred[pred < 0] <- 0

mod3 <- dc_CA(formulaEnv = mod$formulaEnv,
              formulaTraits = mod$formulaTraits,
              response = pred,  # must delete "Sites"
              dataEnv = dune_trait_env$envir,
              dataTraits = dune_trait_env$traits,
              divide.by.site.totals = divide,
              verbose = TRUE)

mod3$eigenvalues / mod$eigenvalues

}
